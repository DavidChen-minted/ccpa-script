webpackHotUpdate("static/development/pages/[aspect].js",{

/***/ "./src/features/dependency/resolveDependency.ts":
/*!******************************************************!*\
  !*** ./src/features/dependency/resolveDependency.ts ***!
  \******************************************************/
/*! exports provided: resolveAllDependency, resolveDependency */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveAllDependency\", function() { return resolveAllDependency; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveDependency\", function() { return resolveDependency; });\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n/* harmony import */ var _StepNodeRecord__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StepNodeRecord */ \"./src/features/dependency/StepNodeRecord.ts\");\n/* harmony import */ var _DependencyQueue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DependencyQueue */ \"./src/features/dependency/DependencyQueue.ts\");\n/* harmony import */ var _isIncludedInDependencyArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isIncludedInDependencyArray */ \"./src/features/dependency/isIncludedInDependencyArray.ts\");\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-param-reassign */\n\n\n\n\n\nvar initiateInvertDependency = function initiateInvertDependency(_ref) {\n  var invertDependencyChecks = _ref.invertDependencyChecks,\n      stepId = _ref.stepId,\n      type = _ref.type;\n\n  if (!invertDependencyChecks[type]) {\n    invertDependencyChecks[type] = {};\n  }\n\n  if (!invertDependencyChecks[type][stepId]) {\n    invertDependencyChecks[type][stepId] = {\n      dependencyCheckList: []\n    };\n  }\n};\n\nvar addNodeToQueueFactory = function addNodeToQueueFactory(queue) {\n  return function (node) {\n    // construct nextNode\n    var nextNode = {\n      scriptType: node.type,\n      stepId: node.stepId\n    };\n\n    if (queue.includes(nextNode)) {\n      // if nextNode is met in the queue before,\n      // it means there's circular dependency\n      throw new Error('circular dependency detected');\n    } else {\n      // nextNode is safe to add to queue\n      queue.push(nextNode);\n    }\n  };\n};\n\nvar insertNodeIntoInvertDependencyChecks = function insertNodeIntoInvertDependencyChecks(_ref2) {\n  var node = _ref2.node,\n      currentNode = _ref2.currentNode,\n      invertDependencyChecks = _ref2.invertDependencyChecks;\n  // construct invert dependency node\n  var invertDependency = {\n    stepId: currentNode.stepId,\n    type: currentNode.scriptType,\n    choice: node.choice\n  }; // initiate state for the node if not initiated\n\n  initiateInvertDependency(_objectSpread({\n    invertDependencyChecks: invertDependencyChecks\n  }, node));\n\n  if (currentNode.scriptType === 'delete' && currentNode.stepId === 'B') {\n    console.log('hello');\n  } // insert the invert dependency node only if not existed\n  // in the node's invert dependency check list\n\n\n  var invertDependencyCheckList = invertDependencyChecks[node.type][node.stepId].dependencyCheckList;\n\n  if (!Object(_isIncludedInDependencyArray__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n    dependency: invertDependency,\n    array: invertDependencyCheckList\n  })) {\n    invertDependencyCheckList.push(invertDependency);\n  }\n};\n\nvar insertNodeIntoDependencyCheckListFactory = function insertNodeIntoDependencyCheckListFactory(_ref3) {\n  var index = _ref3.index,\n      dependencyCheckList = _ref3.dependencyCheckList,\n      currentNode = _ref3.currentNode,\n      invertDependencyChecks = _ref3.invertDependencyChecks;\n  return function (node) {\n    // insert dependency node only if not existed\n    if (!Object(_isIncludedInDependencyArray__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n      dependency: node,\n      array: dependencyCheckList\n    })) {\n      dependencyCheckList.splice(index, 0, node);\n    }\n\n    insertNodeIntoInvertDependencyChecks({\n      node: node,\n      currentNode: currentNode,\n      invertDependencyChecks: invertDependencyChecks\n    });\n  };\n};\n\nvar resolveAllDependency = function resolveAllDependency(_ref4) {\n  var dependencyChecks = _ref4.dependencyChecks,\n      _ref4$invertDependenc = _ref4.invertDependencyChecks,\n      invertDependencyChecks = _ref4$invertDependenc === void 0 ? {} : _ref4$invertDependenc;\n  return Object(_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_2__[\"createNextState\"])({\n    dependencyChecks: dependencyChecks,\n    invertDependencyChecks: invertDependencyChecks\n  }, function (draft) {\n    var draftDependencyChecks = draft.dependencyChecks,\n        draftInvertDependencyChecks = draft.invertDependencyChecks;\n    var resolved = new _StepNodeRecord__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    var seen = new _StepNodeRecord__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    Object.keys(draftDependencyChecks).forEach(function (scriptType) {\n      // loop through each scriptType\n      draftDependencyChecks[scriptType].ids.forEach(function (id) {\n        // loop through each dependency element in each scriptType\n        var stepId = id.toString(); // initiate queue\n\n        var queue = new _DependencyQueue__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n          scriptType: scriptType,\n          stepId: stepId\n        }); // declare function to add a node to queue\n        // use first scriptType as default type\n\n        var addNodeToQueue = addNodeToQueueFactory(queue);\n\n        while (queue.length) {\n          // make sure processing every node in queue\n          // current pointer node\n          var nodeToCheck = queue[queue.length - 1]; // find the current node in the state\n\n          var stepToUpdate = draftDependencyChecks[nodeToCheck.scriptType].entities[nodeToCheck.stepId];\n\n          if (resolved.includes(nodeToCheck)) {\n            // if current node is resolved\n            queue.pop();\n          } else if (stepToUpdate) {\n            // current node still have dependency to resolve\n            if (!seen.includes(nodeToCheck)) {\n              // if current node not seen before\n              // initiate current node's dependency array\n              stepToUpdate.dependencyCheckList = Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(stepToUpdate.dependency); // add current node to seen\n\n              seen.add(nodeToCheck); // add all dependent node to queue\n\n              stepToUpdate.dependency.forEach(addNodeToQueue);\n            } else {\n              // current node has been seen before\n              // it implies that current node have all nodes in dependency resolved\n              var _stepToUpdate$depende = stepToUpdate.dependencyCheckList,\n                  dependencyCheckList = _stepToUpdate$depende === void 0 ? [] : _stepToUpdate$depende;\n\n              for (var i = dependencyCheckList.length - 1; i >= 0; i -= 1) {\n                var _draftDependencyCheck;\n\n                // loop through every node in current dependency check list from the end\n                // step that corresponds to current node to replace\n                var stepToReplace = (_draftDependencyCheck = draftDependencyChecks[dependencyCheckList[i].type || '']) === null || _draftDependencyCheck === void 0 ? void 0 : _draftDependencyCheck.entities[dependencyCheckList[i].stepId];\n\n                if (stepToReplace) {\n                  var _stepToReplace$depend;\n\n                  // if stepToReplace exists\n                  // it means the stepToReplace has dependencyCheckList to replace\n                  // remove the current nodeToReplace first\n                  var nodeToReplace = dependencyCheckList.splice(i, 1)[0]; // copy stepToReplace's dependencyCheckList to stepToUpdate's dependencyCheckList\n                  // without duplicated nodes\n                  // eslint-disable-next-line no-unused-expressions\n\n                  (_stepToReplace$depend = stepToReplace.dependencyCheckList) === null || _stepToReplace$depend === void 0 ? void 0 : _stepToReplace$depend.forEach(insertNodeIntoDependencyCheckListFactory({\n                    index: i,\n                    dependencyCheckList: dependencyCheckList,\n                    currentNode: nodeToCheck,\n                    invertDependencyChecks: draftInvertDependencyChecks\n                  })); // insert the current nodeToReplace again if not exists\n\n                  insertNodeIntoDependencyCheckListFactory({\n                    index: i,\n                    dependencyCheckList: dependencyCheckList,\n                    currentNode: nodeToCheck,\n                    invertDependencyChecks: draftInvertDependencyChecks\n                  })(nodeToReplace);\n                } else {\n                  insertNodeIntoInvertDependencyChecks({\n                    node: dependencyCheckList[i],\n                    currentNode: nodeToCheck,\n                    invertDependencyChecks: invertDependencyChecks\n                  });\n                }\n              }\n\n              resolved.add(nodeToCheck);\n              queue.pop();\n            }\n          } else {\n            // current node does not have any dependency\n            resolved.add(nodeToCheck);\n            queue.pop();\n          }\n        }\n      });\n    });\n    return draft;\n  });\n};\nvar resolveDependency = function resolveDependency() {};\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/dependency/resolveDependency.ts\n");

/***/ })

})
{"version":3,"file":"static/webpack/static/development/pages/index/[id].js.47900a7f32b191eb1ade.hot-update.js","sources":["webpack:///./src/features/text/TextDiv.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { css } from '@emotion/core';\nimport { updateFirst, updateSecond } from './textSlice';\nimport { AppDispatch } from '../../stores';\nimport { selectFirstText, selectSecondText } from './textSelectors';\nimport rem from '../../utils/style/rem';\nimport DynamicStoreWrap, {\n  CallbackOnStore,\n} from '../../utils/redux/DynamicStoreWrap';\nimport { reducerCombo2 } from '../../reducers/reducerCombo';\n\nconst strDivStyles = css`\n  display: flex;\n  align-items: center;\n  margin: ${rem(5)};\n  & > * {\n    margin: 0 ${rem(5)};\n  }\n  & > input {\n    max-width: ${rem(50)};\n    width: 100%;\n    height: ${rem(15)};\n  }\n`;\n\nconst TextDiv: FC = () => {\n  const [input1, changeInput1] = useState('');\n  const [input2, changeInput2] = useState('');\n  const dispatch = useDispatch<AppDispatch>();\n  const text1 = useSelector(selectFirstText);\n  const text2 = useSelector(selectSecondText);\n\n  return (\n    <div>\n      <div css={strDivStyles}>\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            changeInput1(e.target.value);\n          }}\n          value={input1}\n        />\n        <button type=\"button\" onClick={() => dispatch(updateFirst(input1))}>\n          change first text\n        </button>\n        <p>{text1}</p>\n      </div>\n      <div css={strDivStyles}>\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            changeInput2(e.target.value);\n          }}\n          value={input2}\n        />\n        <button type=\"button\" onClick={() => dispatch(updateSecond(input2))}>\n          change second text\n        </button>\n        <p>{text2}</p>\n      </div>\n    </div>\n  );\n};\n\nconst callbackOnMount: CallbackOnStore = async (store) =>\n  store.substitueReducers(reducerCombo2);\n\nconst callbackOnUnmount: CallbackOnStore = async (store) =>\n  store.removeReducers(['count']);\n\nconst TextDivWrap = () => (\n  <DynamicStoreWrap\n    callbackOnMount={callbackOnMount}\n    callbackOnUnmount={callbackOnUnmount}\n  >\n    <TextDiv />\n  </DynamicStoreWrap>\n);\n\nexport default TextDivWrap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAEA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAQA;;;;A","sourceRoot":""}
# steps to check
steps:
  - id: begin_drupal
    check:
      script:
        db: drupal
        snippets:
            - set_email_var
    delete:
      script:
        db: drupal
        snippets:
          - set_request_number_var
          - set_user_id_var
          - compose_email_placeholder
          - compose_text_placeholder
    validation:
      script:
        db: drupal
        snippets:
          - set_request_number_var
          - set_user_id_var
          - compose_email_placeholder
          - compose_text_placeholder
  - id: users
    check:
      description: >
        check if the email is in users table in bidata DB
      script:
        db: drupal
        snippets:
          - find_user_id
          - show_user_id
    delete:
      description: >
        create sql to "delete" in users table
      script:
        db: drupal
        snippets:
          - update_placeholder_in_users
    validation:
      description: >
        create sql to verify "deletions" in users
      script:
        db: drupal
        snippets:
          - validate_users_placeholder
  - id: sessions
    check:
      description: >
        check if the user id is in sessions table in sessions DB
      script:
        db: sessions
        snippets:
          - set_user_id_var
          - find_sessions
    delete:
      description: >
        create sql to delete rows in sessions table
      script:
        db: sessions
        snippets:
          - delete_sessions
  - id: friend_email
    check:
      description: >
        check if the email is in friend_email table in bidata DB
      script:
        db: drupal
        snippets:
          - set_email_var
          - find_friend_email_id_list
    delete:
      description: >
        create sql to "delete" in friend_email
      script:
        db: drupal
        snippets:
          - update_placeholder_in_friend_email
    validation:
      description: >
        create sql to verify "deletion" in friend_email
      script:
        db: drupal
        snippets:
          - validate_friend_email_placeholder
  - id: friend_address
    check:
      description: >
        check if the friend email id is in friend_address table in bidata DB
      dependency:
        - stepId: friend_email
          type: check
          choice: yes
      script:
        db: drupal
        snippets:
          - find_friend_address
  - id: minted_account
    check:
      description: >
        check if the user id is in minted_account table in bidata DB
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_account
    delete:
      description: >
        create sql to "delete" in minted_account
      script:
        db: drupal
        snippets:
          - update_placeholder_in_minted_account
    validation:
      description: >
        create sql to verify "deletion" in minted_account
      script:
        db: drupal
        snippets:
          - validate_minted_account_placeholder
  - id: minted_order_incomplete
    check:
      description: >
        check if the user id is in minted_order table in bidata DB and 
        order has been placed and NOT completed
      choices:
        - id: yes
          notes: >
            TODO: We need to wait for the order to be completed 
            before we delete data
        - no
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_order_incomplete
  - id: minted_order_complete_within_3_months
    check:
      description: >
        check if the user id is in minted_order table in bidata DB and 
        order has been placed, completed, and not passed the return policy, 
        3 months after purchase
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_order_complete_within_3_months
  - id: minted_order_digital
    check:
      dependency:
        - stepId: minted_order_complete_within_3_months
          choice: yes
          type: check
      description: >
        check if the minted_order_line_item is digital
      choices:
        - yes
        - id: no
          notes: >
            TODO: We need to wait for the return policy to pass before we delete data
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_order_digital
  - id: minted_order_complete_3_months_before
    check:
      description: >
        check if the user id is in minted_order table in bidata DB and order has been placed, completed, 
        and passed the return policy, 3 months after purchase
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_order_complete_3_months_before
    delete:
      description: >
        create sql to "delete" in minted_order
      script:
        db: drupal
        snippets:
          - update_placeholder_in_minted_order
    validation:
      description: >
        create sql to verify "deletion" in minted_order
      script:
        db: drupal
        snippets:
          - valdiate_minted_order_placeholder
  - id: minted_order_line_item
    check:
      description: >
        check if the user id is in minted_order_line_item table in bidata DB
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_order_line_item
    delete:
      description: >
        create sql to "delete" in minted_order_line_item
      script:
        db: drupal
        snippets:
          - update_placeholder_in_minted_order_line_item
    validation:
      description: >
        create sql to verify "deletion" in minted_order_line_item
      script:
        db: drupal
        snippets:
          - validate_minted_order_line_item_placeholder
  - id: thumbnail_in_minted_order_line_item
    check:
      description: >
        check if updated_thumbnail_url is in minted_order_line_item
      choices:
        - id: yes
          notes: >
            TODO: Download the appropriate asset 
            https://minted.atlassian.net/wiki/spaces/EN/pages/253427737/Taking+inventory+of+PII+and+preparing+for+CCPA+requests#Placeholder-assets 
            Go to the appropriate bucket in S3 and file. Replace the file with the asset you just downloaded.
        - no
      script:
        db: drupal
        snippets:
          - find_thumbnail_url_in_minted_order_line_item
  - id: price_adjustment_note
    check:
      description: >
        check if the user id is in price_adjustment_note table in bidata DB
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_price_adjustment_note
    delete:
      description: >
        create sql to "delete" in price_adjustment_note only after all orders are completed and passed the return policy
      script:
        db: drupal
        snippets:
          - update_placeholder_in_price_adjustment_note
    validation:
      description: >
        create sql to verify "deletion" in price_adjustment_note
      script:
        db: drupal
        snippets:
          - validate_price_adjustment_note_placeholder
  - id: payment_information
    check:
      description: >
        check if the user id is in payment_information table in bidata DB
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_payment_information
    delete:
      description: >
        create sql to "delete" in payment_information only after all orders are completed and passed the return policy
      script:
        db: drupal
        snippets:
          - update_placeholder_in_payment_information
    validation:
      description: >
        create sql to verify "deletion" in payment_information
      script:
        db: drupal
        snippets:
          - validate_payment_information_placeholder
  - id: minted_address
    check:
      description: >
        check if the user id is in minted_address table in bidata DB
      script:
        db: drupal
        snippets:
          - set_user_id_var
          - find_minted_address
    delete:
      description: >
        create sql to "delete" in minted_address only after all orders are completed and passed the return policy
      script:
        db: drupal
        snippets:
          - update_placeholder_in_minted_address
      dependency:
        - stepId: minted_order_incomplete
          choice: no
          type: check
    validation:
      description: >
        create sql to verify "deletion" in minted_address
      script:
        db: drupal
        snippets:
          - validate_minted_address_placeholder
  - id: begin_di
    check:
      script:
        db: di
        snippets:
            - set_email_var_unicode
    delete:
      script:
        db: di
        snippets:
          - set_request_number_var
          - compose_email_placeholder
          - compose_text_placeholder
  - id: di_unsubscribe_as_host
    check:
      description: >
        check if the email is in di_unsubscribe table in DI DB as a host
      script:
        db: di
        snippets:
          - set_email_var_unicode
          - find_di_unsubscribe_host
          - show_di_unsubscribe_host_id
  - id: di_unsubscribe_as_guest
    check:
      description: >
        check if the email is in di_unsubscribe table in DI DB as a guest
      script:
        db: di
        snippets:
          - set_email_var_unicode
          - find_di_unsubscribe_guest
          - show_di_unsubscribe_guest_id
  - id: di_invitation
    check:
      description: >
        check if the invitation id is in di_invitation table in DI DB as a guest
      script:
        db: di
        snippets:
          - set_email_var_unicode
          - find_di_invitation_id_list
    delete:
      description: >
        create sql to "delete" in di_invitation
      script:
        db: di
        snippets:
          - update_placeholder_in_di_invitation
    validation:
      description:
        create sql to verify "deletion" in di_invitation in DI DB
      script:
        db: di
        snippets:
          - validate_di_invitation_placeholder
  - id: di_event_poll_question_response
    check:
      description: >
        check if the invitation id is in di_event_poll_question_response table in DI DB as a guest
      script:
        db: di
        snippets:
          - find_di_event_poll_question_response
  - id: email_in_di_host_test_email
    check:
      description: >
        check if the email is in di_host_test_email table in DI DB
      script:
        db: di
        snippets:
          - set_email_var_unicode
          - find_email_in_di_host_test_email
  - id: di_email_as_guest
    check:
      description: >
        check if the event id is in di_email table in DI DB as a guest
      script:
        db: di
        snippets:
          - set_email_var_unicode
          - find_di_email_id_list_guest
    delete:
      description: >
        create sql to delete from di_email as a guest
      script:
        db: di
        snippets:
          - delete_di_email_as_guest
    validation:
      description: >
        create sql to verify deletion in di_email in DI DB
      script:
        db: di
        snippets:
          - validate_di_email_as_guest_deletion
  - id: di_event_as_host
    check:
      description: >
        check if the user id is in di_event table in DI DB as a host
      script:
        db: di
        snippets:
          - set_user_id_var
          - find_di_event_id_list
  - id: di_email_as_host
    check:
      description: >
        check if the event id is in di_email table in DI DB as a host
      script:
        db: di
        snippets:
          - find_di_email_host
  - id: di_event_attribute
    check:
      description: >
        check if the event id is in di_event_attribute table in DI DB
      script:
        db: di
        snippets:
          - find_di_event_attribute
  - id: di_event_comment
    check:
      description: >
        check if the event id is in di_event_comment table in DI DB
      script:
        db: di
        snippets:
          - find_di_event_comment
  - id: di_event_message
    check:
      description: >
        check if the event id is in di_event_message table in DI DB
      script:
        db: di
        snippets:
          - find_di_event_message
  - id: di_event_poll_question
    check:
      description: >
        check if the event id is in di_event_poll_question table in DI DB
      script:
        db: di
        snippets:
          - find_di_event_poll_question
  - id: di_event_update_event
    check:
      description: >
        check if the event id is in di_event_update_event table in DI DB
      script:
        db: di
        snippets:
          - find_di_event_update_event
  - id: event_id_in_di_host_test_email
    check:
      description: >
        check if the event id is in di_host_test_email table in DI DB
      script:
        db: di
        snippets:
          - find_event_id_in_di_host_test_email
  - id: di_media
    check:
      description: >
        check if the event id is in di_media table in DI DB
      script:
        db: di
        snippets:
          - find_di_media
  - id: transactional_email
    check:
      description: >
        check if the email is in transactional email jobs table
      script:
        db: jobs
        snippets:
          - set_email_like_var
          - find_job_id_list_for_email_in_jobs
    delete:
      description: >
        create sql to delete from jobs table
      script:
        db: jobs
        snippets:
          - delete_job_for_job_id_in_jobs
  - id: di_jobs
    check:
      description: >
        check if the email is in DI jobs table
      script:
        db: di_jobs
        snippets:
          - set_email_like_var
          - find_job_id_list_for_email_in_di_jobs
    delete:
      description: >
        create sql to delete from DI jobs table
      script:
        db: di_jobs
        snippets:
          - delete_job_for_job_id_in_di_jobs

# script types
types:
  - check
  - delete
  - validation

# script database
db:
  - drupal
  - sessions
  - di
  - jobs
  - di_jobs

# variables to replace
vars:
  email:
    description: >
      email address from OneTrust
  requestNumber:
    description: >
      request number from OneTrust
  userId:
    description: >
      user id from the main drupal database
  friendEmailIdList:
    description: >
      friend email id list from the main drupal database
  mintedOrderIdList:
    description: >
      minted order id list that is safe to modify
  diEmailIdList:
    description: >
      di email id as guest list from di database
  diInvitationIdList:
    description: >
      di invitation id list from di database
  diEventIdList:
    description: >
      di event id list from di database
  jobIdList:
    description: >
      job id list from transactional email job database
  diJobIdList:
    description: >
      job id list from di email job database

# database sql snippets
snippets:
  set_email_var: |
    set @email = "{{email}}";
  set_email_var_unicode: |
    set @email = "{{email}}" COLLATE utf8_unicode_ci;
  set_email_like_var: |
    set @email = "%{{email}}%";
  find_user_id: |
    select uid into @UID from users where mail like "{{email}}%";
  show_user_id: |
    select @UID as userId;
  set_request_number_var: |
    set @requestnumber = "{{requestNumber}}";
  set_user_id_var: |
    set @UID = {{userId}};
  compose_email_placeholder: |
    select concat("deleted-onetrust-req-", @requestnumber, "@privacy.mntd.net") into @emailplaceholder;
  compose_text_placeholder: |
    select concat("Deleted per onetrust", @requestnumber) into @textplaceholder;
  update_placeholder_in_users: |
    update users
    set
    name = @textplaceholder,
    init = @textplaceholder,
    mail = @emailplaceholder,
    pass = @textplaceholder
    where uid = @UID;
  find_sessions: |
    select * from sessions where uid = @UID;
  find_friend_email_id_list: |
    select group_concat(id) as friendEmailIdList from friend_email where email = @email;
  find_friend_address: |
    select * from friend_address 
    where id in (
      select friend_address_id from friend_email 
      where id in ({{friendEmailIdList}})
    );
  find_minted_account: |
    select * from minted_account where user_id = @UID;
  find_minted_order_incomplete: |
    select *
    from minted_order
    where owner_id = @UID
      and is_placed = 1
      and minted_state_diagram_state_id <> 150;
  find_minted_order_complete_within_3_months: |
    select *
    from minted_order
    where owner_id = @UID
      and is_placed = 1
      and minted_state_diagram_state_id = 150
      and date_add(order_placement_date, interval 3 month) >= now();
  find_minted_order_digital: |
    select moli.*
    from minted_order mo
    inner join minted_order_line_item moli
    on mo.id = moli.minted_order_id
    and moli.line_item_type = 'product'
    where owner_id = @UID
      and is_placed = 1
      and minted_state_diagram_state_id = 150
      and date_add(order_placement_date, interval 3 month) >= now();
  find_minted_order_complete_3_months_before: |
    select group_concat(id) as mintedOrderIdList
    from minted_order
    where owner_id = @UID
      and (
        (
          is_placed = 1
          and minted_state_diagram_state_id = 150
          and date_add(order_placement_date, interval 3 month) < now()
        )
        or (is_placed = 0)
      );
  find_minted_order_line_item: |
    select * from minted_order_line_item moli
    inner join minted_order mo
    on moli.minted_order_id = mo.id
    where owner_id = @UID
      and
      (
        (
          is_placed = 1
          and minted_state_diagram_state_id = 150
          and date_add(order_placement_date, interval 3 month) < now()
        )
        or (is_placed = 0)
      );
  find_price_adjustment_note: |
    select * from minted_order mo
    inner join price_adjustment_note pan
    on mo.id = pan.order_id
    where owner_id = @UID;
  find_payment_information: |
    select * from payment_information where user_id = @UID;
  find_minted_address: |
    select * from minted_address where user_id = @UID;
  find_di_unsubscribe_host: |
    select id into @diunsubscribehostid
    from di_unsubscribe
    where host_email = @email;
  show_di_unsubscribe_host_id: |
    select @diunsubscribehostid;
  find_di_unsubscribe_guest: |
    select id into @diunsubscribeguestid
    from di_unsubscribe
    where guest_email = @email;
  show_di_unsubscribe_guest_id: |
    select @diunsubscribeguestid;
  find_di_invitation_id_list: |
    select group_concat(id) as diInvitationIdList
    from di_invitation where email = @email;

  find_di_event_poll_question_response: |
    select * 
    from di_event_poll_question_response
    where di_invitation_id in ({{diInvitationIdList}});
  find_email_in_di_host_test_email: |
    select * 
    from di_host_test_email
    where email_address = @email;
  find_di_email_id_list_guest: |
    select group_concat(id)
    from di_email
    where email = @email;
  find_di_event_id_list: |
    select group_concat(id) as diEventIdList from di_event 
    where creator_user_id = @UID;
  find_di_email_host: |
    select *
    from di_email
    where di_event_id in ({{diEventIdList}});
  find_di_event_attribute: |
    select * 
    from di_event_attribute
    where di_event_id in ({{diEventIdList}});
  find_di_event_comment: |
    select * 
    from di_event_comment
    where di_event_id in ({{diEventIdList}});
  find_di_event_message: |
    select * 
    from di_event_message
    where di_event_id in ({{diEventIdList}});
  find_di_event_poll_question: |
    select * 
    from di_event_poll_question
    where di_event_id in ({{diEventIdList}});
  find_di_event_update_event: |
    select * 
    from di_event_update_event
    where di_event_id in ({{diEventIdList}});
  find_event_id_in_di_host_test_email: |
    select * 
    from di_host_test_email
    where di_event_id in ({{diEventIdList}});
  find_di_media: |
    (select dm.* 
    from di_event de
    inner join di_media dm
    on de.rendered_card_media_id = dm.id
    where de.id in ({{diEventIdList}}))
    union
    (select dm.* 
    from di_host_test_email dhte
    inner join di_media dm
    on dhte.rendered_card_media_id = dm.id
    where di_event_id in ({{diEventIdList}}))
    union
    (select dm.* 
    from di_host_test_email dhte
    inner join di_media dm
    on dhte.rendered_text_media_id = dm.id
    where di_event_id in ({{diEventIdList}}))
    union
    (select dm.* 
    from di_host_test_email dhte
    inner join di_media dm
    on dhte.rendered_email_composite_media_id = dm.id
    where di_event_id in ({{diEventIdList}}))
    union
    (select dm.* 
    from di_invitation di
    inner join di_media dm
    on di.rendered_text_media_id = dm.id
    where di_event_id in ({{diEventIdList}}))
    union
    (select dm.* 
    from di_invitation di
    inner join di_media dm
    on di.rendered_email_composite_media_id = dm.id
    where di_event_id in ({{diEventIdList}}));
  find_job_id_list_for_email_in_jobs: |
    select group_concat(id) as jobIdList from job 
    where arguments like @email;
  find_job_id_list_for_email_in_di_jobs: |
    select group_concat(id) as diJobIdList from job 
    where arguments like @email;
  delete_sessions: |
    delete from sessions where uid = {{userId}};
  update_placeholder_in_friend_email: |
    update friend_email
    set
      display_name = @textplaceholder,
      email = @emailplaceholder,
      name = @textplaceholder
    where id in ({{friendEmailIdList}});
  update_placeholder_in_minted_account: |
    update minted_account
    set
      first_name = @textplaceholder,
      last_name = @textplaceholder,
      phone = @textplaceholder,
      birthday = NULL,
      wedding_anniversary = NULL,
      location = @textplaceholder,
      gender = NULL
    where user_id = @UID;
  update_placeholder_in_minted_order: |
    update minted_order
    set
      cc_name = @textplaceholder,
      gift_message = @textplaceholder,
      special_instructions = NULL,
      calculated_country_code = '',
      calculated_region = ''
    where id in ({{mintedOrderIdList}});
  update_placeholder_in_minted_order_line_item: |
    update minted_order_line_item
    set shipping_tracking_number = @textplaceholder
    where minted_order_id in ({{mintedOrderIdList}});
  find_thumbnail_url_in_minted_order_line_item: |
    select updated_thumbnail_url from minted_order_line_item
    where minted_order_id in ({{mintedOrderIdList}});
  update_placeholder_in_price_adjustment_note: |
    update price_adjustment_note pan
    inner join minted_order mo
    on mo.id = pan.order_id
    set note = @textplaceholder
    where mo.owner_id = @UID;
  update_placeholder_in_payment_information: |
    update payment_information
    set payment_owner_name = @textplaceholder
    where user_id = @UID;
  update_placeholder_in_minted_address: |
    update minted_address
    set
      first_name = @textplaceholder,
      last_name = @textplaceholder,
      phone = @textplaceholder,
      zipcode = NULL,
      address_name = @textplaceholder,
      address1 = @textplaceholder,
      address2 = @textplaceholder,
      city = @textplaceholder,
      country = NULL,
      region = @textplaceholder,
      state = NULL
    where user_id = @UID;
  update_placeholder_in_di_invitation: |
    update di_invitation
    set
      name = @textplaceholder,
      email = @textplaceholder,
      note = @textplaceholder
    where id in ({{diInvitationIdList}});
  delete_di_email_as_guest: |
    delete from di_email
    where id in ({{diEmailIdList}});
  delete_job_for_job_id_in_jobs: |
    delete from job
    where id in ({{jobIdList}});
  delete_job_for_job_id_in_di_jobs: |
    delete from job
    where id in ({{diJobIdList}});
  validate_friend_email_placeholder: |
    select * from friend_email
    where id in ({{friendEmailIdList}})
      and display_name = @textplaceholder
      and email = @emailplaceholder
      and name = @textplaceholder;
  validate_users_placeholder: |
    select * from users
    where uid = @UID
      and name = @textplaceholder
      and init = @textplaceholder
      and mail = @emailplaceholder
      and pass = @textplaceholder;
  validate_minted_account_placeholder: |
    select * from minted_account
    where user_id = @UID
      and first_name = @textplaceholder
      and last_name = @textplaceholder
      and phone = @textplaceholder
      and birthday IS NULL
      and wedding_anniversary IS NULL
      and location = @textplaceholder
      and gender IS NULL;
  valdiate_minted_order_placeholder: |
    select * from minted_order
    where id in ({{mintedOrderIdList}})
      and cc_name = @textplaceholder
      and gift_message = @textplaceholder
      and special_instructions IS NULL
      and calculated_country_code = ''
      and calculated_region = '';
  validate_minted_order_line_item_placeholder: |
    select * from minted_order_line_item
    where minted_order_id in ({{mintedOrderIdList}})
      and shipping_tracking_number = @textplaceholder;
  validate_price_adjustment_note_placeholder: |
    select * from price_adjustment_note pan
    inner join minted_order mo
    on mo.id = pan.order_id
    where mo.owner_id = @UID
      and note = @textplaceholder;
  validate_payment_information_placeholder: |
    select * from payment_information
    where user_id = @UID
      and payment_owner_name = @textplaceholder;
  validate_minted_address_placeholder: |
    select * from minted_address
    where user_id = @UID
      and first_name = @textplaceholder
      and last_name = @textplaceholder
      and phone = @textplaceholder
      and zipcode IS NULL
      and address_name = @textplaceholder
      and address1 = @textplaceholder
      and address2 = @textplaceholder
      and city = @textplaceholder
      and country IS NULL
      and region = @textplaceholder
      and state IS NULL;
  validate_di_email_as_guest_deletion: |
    select * from di_email
    where id in ({{diEmailIdList}});
  validate_di_invitation_placeholder: |
    select * from di_invitation
    where id in ({{diInvitationIdList}});